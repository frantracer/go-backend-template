// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http_test

import (
	"context"
	"github.com/frantacer/go-backend-template/src/application/handlers"
	"github.com/frantacer/go-backend-template/src/domain"
	"sync"
)

// Ensure, that InsertTaskHandlerMock does implement handlers.InsertTaskHandler.
// If this is not the case, regenerate this file with moq.
var _ handlers.InsertTaskHandler = &InsertTaskHandlerMock{}

// InsertTaskHandlerMock is a mock implementation of handlers.InsertTaskHandler.
//
// 	func TestSomethingThatUsesInsertTaskHandler(t *testing.T) {
//
// 		// make and configure a mocked handlers.InsertTaskHandler
// 		mockedInsertTaskHandler := &InsertTaskHandlerMock{
// 			HandleFunc: func(ctx context.Context, cmd handlers.InsertTaskCommand) (domain.Task, error) {
// 				panic("mock out the Handle method")
// 			},
// 		}
//
// 		// use mockedInsertTaskHandler in code that requires handlers.InsertTaskHandler
// 		// and then make assertions.
//
// 	}
type InsertTaskHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, cmd handlers.InsertTaskCommand) (domain.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cmd is the cmd argument value.
			Cmd handlers.InsertTaskCommand
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *InsertTaskHandlerMock) Handle(ctx context.Context, cmd handlers.InsertTaskCommand) (domain.Task, error) {
	if mock.HandleFunc == nil {
		panic("InsertTaskHandlerMock.HandleFunc: method is nil but InsertTaskHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cmd handlers.InsertTaskCommand
	}{
		Ctx: ctx,
		Cmd: cmd,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, cmd)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedInsertTaskHandler.HandleCalls())
func (mock *InsertTaskHandlerMock) HandleCalls() []struct {
	Ctx context.Context
	Cmd handlers.InsertTaskCommand
} {
	var calls []struct {
		Ctx context.Context
		Cmd handlers.InsertTaskCommand
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}

// Ensure, that FindTasksHandlerMock does implement handlers.FindTasksHandler.
// If this is not the case, regenerate this file with moq.
var _ handlers.FindTasksHandler = &FindTasksHandlerMock{}

// FindTasksHandlerMock is a mock implementation of handlers.FindTasksHandler.
//
// 	func TestSomethingThatUsesFindTasksHandler(t *testing.T) {
//
// 		// make and configure a mocked handlers.FindTasksHandler
// 		mockedFindTasksHandler := &FindTasksHandlerMock{
// 			HandleFunc: func(ctx context.Context) ([]domain.Task, error) {
// 				panic("mock out the Handle method")
// 			},
// 		}
//
// 		// use mockedFindTasksHandler in code that requires handlers.FindTasksHandler
// 		// and then make assertions.
//
// 	}
type FindTasksHandlerMock struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context) ([]domain.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *FindTasksHandlerMock) Handle(ctx context.Context) ([]domain.Task, error) {
	if mock.HandleFunc == nil {
		panic("FindTasksHandlerMock.HandleFunc: method is nil but FindTasksHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//     len(mockedFindTasksHandler.HandleCalls())
func (mock *FindTasksHandlerMock) HandleCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
